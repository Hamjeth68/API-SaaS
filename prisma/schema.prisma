// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -----------------------------------------------------------
// Core Multi-Tenancy Models (Shared across all tenants)
// -----------------------------------------------------------
model Tenant {
  id           String   @id @default(cuid())
  name         String
  slug         String   @unique
  subdomain    String?  @unique
  email        String   @unique
  phone        String?
  address      String?
  logo         String?
  languages    String[] @default(["en"])
  maxStudents  Int      @default(25)
  subscription String   @default("free")
  timezone     String   @default("Asia/Colombo")
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  users           User[]
  staff           Staff[]
  students        Student[]
  classes         Class[]
  attendances     Attendance[]
  fees            Fee[]
  reports         Report[]
  timetables      Timetable[]
  payrolls        Payroll[]
  chats           Chat[]
  communications  Communication[]
  homeworks       Homework[]
  homeworkSubmissions HomeworkSubmission[]
  exams           Exam[]
  examResults     ExamResult[]
  libraryBooks    LibraryBook[]
  bookCheckouts   BookCheckout[]
  transportRoutes TransportRoute[]
  vehicles        Vehicle[]
  hostels         Hostel[]
  hostelRooms     HostelRoom[]
  hostelAllocations HostelAllocation[]
  parentStudents  ParentStudent[]
  leaveApplications LeaveApplication[]

  @@map("tenants")
}


model Chat {
  id           String    @id @default(uuid())
  tenantId     String
  tenant       Tenant    @relation(fields: [tenantId], references: [id])
  participants User[]    @relation("ChatParticipants")
  messages     Message[]
  name         String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}
model Message {
  id        String   @id @default(uuid())
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  senderId  String
  sender    User     @relation(fields: [senderId], references: [id])
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Global User model (linked to a specific tenant)

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  password     String
  firstName    String
  lastName     String
  role         UserRole
  isActive     Boolean  @default(true)
  tenantId     String
  refreshToken String? @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  tenant          Tenant          @relation(fields: [tenantId], references: [id])
  staff           Staff?
  communications  Communication[] @relation("UserCommunications")
  communicationReads CommunicationRead[]
  chats           Chat[]          @relation("ChatParticipants")
  sentMessages    Message[]
  homeworkSubmissions HomeworkSubmission[] @relation("UserHomeworkSubmissions")
  bookCheckouts   BookCheckout[]
  parentRelations ParentStudent[] @relation("ParentRelations")
  leaveApplicationsAsApplicant LeaveApplication[] @relation("LeaveApplicationApplicant")
  leaveApplicationsAsApprover LeaveApplication[] @relation("LeaveApplicationApprover")

  @@map("users")
}


enum UserRole {
  SYS_ADMIN
  SCHOOL_ADMIN
  TEACHER
  PARENT
  STUDENT
  LIBRARIAN
  TRANSPORT_MANAGER
  HOSTEL_MANAGER
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum FeeStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

// -----------------------------------------------------------
// Tenant-Specific Models (All include tenantId)
// -----------------------------------------------------------
model Student {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String?
  phone     String?
  isActive  Boolean  @default(true)
  tenantId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tenant        Tenant        @relation(fields: [tenantId], references: [id])
  attendances   Attendance[]
  fees          Fee[]
  classStudents ClassStudent[]
  homeworkSubmissions HomeworkSubmission[]
  examResults   ExamResult[]
  hostelAllocations HostelAllocation[]
  parentStudents ParentStudent[] @relation("StudentParentRelations")

  @@map("students")
}

model Staff {
  id         String   @id @default(uuid())
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id])
  tenantId   String
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  staffId    String
  position   String
  department String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  attendances Attendance[]
  classes     Class[]
  payrolls    Payroll[]
  homeworks   Homework[]
  vehicles    Vehicle[]

  @@unique([staffId, tenantId], map: "staff_id_unique_per_tenant")
  @@index([tenantId])
}


model Class {
  id        String   @id @default(cuid())
  name      String
  grade     String?
  section   String?
  isActive  Boolean  @default(true)
  tenantId  String
  teacherId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tenant        Tenant        @relation(fields: [tenantId], references: [id])
  teacher       Staff?        @relation(fields: [teacherId], references: [id])
  attendances   Attendance[]
  classStudents ClassStudent[]
  homeworks     Homework[]
  exams         Exam[]

  @@map("classes")
}

model ClassStudent {
  id        String   @id @default(uuid())
  classId   String
  class     Class    @relation(fields: [classId], references: [id])
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
  tenantId  String
  createdAt DateTime @default(now())

  @@unique([classId, studentId])
  @@index([tenantId])
}

// -----------------------------------------------------------
// Attendance Models 
// -----------------------------------------------------------

model Attendance {
  id        String           @id @default(cuid())
  date      String           // Format: YYYY-MM-DD
  status    AttendanceStatus
  studentId String?
  staffId   String?
  classId   String?
  tenantId  String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  tenant  Tenant   @relation(fields: [tenantId], references: [id])
  student Student? @relation(fields: [studentId], references: [id])
  staff   Staff?   @relation(fields: [staffId], references: [id])
  class   Class?   @relation(fields: [classId], references: [id])

  @@unique([studentId, date])
  @@map("attendances")
}
// -----------------------------------------------------------
// Communication Models 
// -----------------------------------------------------------
model Communication {
  id            String   @id @default(uuid())
  title         String
  content       String
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id])
  audience      String[] // Array of role names or user IDs
  type          CommunicationType @default(ANNOUNCEMENT)
  priority      CommunicationPriority @default(MEDIUM)
  sendEmail     Boolean  @default(false)
  sendNotification Boolean @default(true)
  scheduledAt   DateTime?
  expiresAt     DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  reads         CommunicationRead[]
  authorId      String
  author        User     @relation(fields: [authorId], references: [id], name: "UserCommunications")
  
  @@map("communications")
}

// -----------------------------------------------------------
// Fee Models 
// -----------------------------------------------------------
model Fee {
  id          String    @id @default(cuid())
  amount      Float
  description String?
  status      FeeStatus @default(PENDING)
  dueDate     DateTime
  paidDate    DateTime?
  studentId   String
  tenantId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  tenant  Tenant  @relation(fields: [tenantId], references: [id])
  student Student @relation(fields: [studentId], references: [id])

  @@map("fees")
}



// -----------------------------------------------------------
// Report  Models 
// -----------------------------------------------------------
model Report {
  id        String   @id @default(uuid())
  name      String
  type      String
  data      Json // Store report data as JSON
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tenantId])
}
// -----------------------------------------------------------
// Timetable  Models 
// -----------------------------------------------------------
model Timetable {
  id        String   @id @default(uuid())
  name      String // e.g., "Term 1 Timetable"
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  // More specific timetable data (e.g., period, subject, class, teacher) would be in related models or JSON field
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tenantId])
}
// -----------------------------------------------------------
// Payroll  Models 
// -----------------------------------------------------------
model Payroll {
  id        String   @id @default(uuid())
  staffId   String
  staff     Staff    @relation(fields: [staffId], references: [id])
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  month     String
  year      Int
  amount    Float
  // Add other payroll specific fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([staffId, month, year])
  @@index([tenantId])
}








model CommunicationRead {
  id               String        @id @default(uuid())
  communicationId  String
  communication    Communication @relation(fields: [communicationId], references: [id], onDelete: Cascade)
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  readAt          DateTime      @default(now())
  
  @@unique([communicationId, userId])
  @@map("communication_reads")
}

enum CommunicationType {
  ANNOUNCEMENT
  NOTICE
  ALERT
  MESSAGE
}

enum CommunicationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}















// Extending the existing schema with new models
model Homework {
  id          String   @id @default(uuid())
  title       String
  description String
  dueDate     DateTime
  classId     String
  class       Class    @relation(fields: [classId], references: [id])
  teacherId   String
  teacher     Staff    @relation(fields: [teacherId], references: [id])
  attachments String[]
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  submissions HomeworkSubmission[]
  
  @@map("homework")
}

model HomeworkSubmission {
  id         String   @id @default(uuid())
  homeworkId String
  homework   Homework @relation(fields: [homeworkId], references: [id])
  studentId  String
  student    Student  @relation(fields: [studentId], references: [id])
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], name: "UserHomeworkSubmissions")
  content    String?
  attachments String[]
  grade      Float?
  feedback   String?
  submittedAt DateTime @default(now())
  tenantId   String
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  
  @@unique([homeworkId, studentId])
  @@map("homework_submissions")
}

model Exam {
  id          String   @id @default(uuid())
  name        String
  description String?
  date        DateTime
  duration    Int
  classId     String
  class       Class    @relation(fields: [classId], references: [id])
  subject     String
  maxScore    Int      @default(100)
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  results     ExamResult[]
  
  @@map("exams")
}

model ExamResult {
  id        String   @id @default(uuid())
  examId    String
  exam      Exam     @relation(fields: [examId], references: [id])
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
  score     Float
  remarks   String?
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  
  @@unique([examId, studentId])
  @@map("exam_results")
}

// Library Module
model LibraryBook {
  id          String   @id @default(uuid())
  title       String
  author      String
  isbn        String?
  barcode     String   @unique
  category    String?
  status      BookStatus @default(AVAILABLE)
  publishedAt DateTime?
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  checkouts   BookCheckout[]
  
  @@map("library_books")
}

model BookCheckout {
  id         String   @id @default(uuid())
  bookId     String
  book       LibraryBook @relation(fields: [bookId], references: [id])
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  checkedOutAt DateTime @default(now())
  dueDate    DateTime
  returnedAt DateTime?
  tenantId   String
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  
  @@map("book_checkouts")
}


enum BookStatus {
  AVAILABLE
  CHECKED_OUT
  LOST
  DAMAGED
}


// Transport Module
model TransportRoute {
  id          String   @id @default(uuid())
  name        String
  description String?
  stops       String[]
  vehicleId   String?
  vehicle     Vehicle? @relation(fields: [vehicleId], references: [id])
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("transport_routes")
}


model Vehicle {
  id           String   @id @default(uuid())
  registration String   @unique
  type         VehicleType
  capacity     Int
  driverId     String?
  driver       Staff?   @relation(fields: [driverId], references: [id])
  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  routes       TransportRoute[]
  
  @@map("vehicles")
}



enum VehicleType {
  BUS
  VAN
  CAR
}

// Hostel Module
model Hostel {
  id          String   @id @default(uuid())
  name        String
  address     String?
  capacity    Int
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  rooms       HostelRoom[]
  
  @@map("hostels")
}
model HostelRoom {
  id        String   @id @default(uuid())
  hostelId  String
  hostel    Hostel  @relation(fields: [hostelId], references: [id])
  number    String
  capacity  Int
  tenantId  String
  tenant    Tenant  @relation(fields: [tenantId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  allocations HostelAllocation[]
  
  @@unique([hostelId, number])
  @@map("hostel_rooms")
}

model HostelAllocation {
  id        String   @id @default(uuid())
  roomId    String
  room      HostelRoom @relation(fields: [roomId], references: [id])
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
  startDate DateTime
  endDate   DateTime?
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([studentId], map: "one_allocation_per_student")
  @@map("hostel_allocations")
}



// Parent-Student Relationship
model ParentStudent {
  id        String   @id @default(uuid())
  parentId  String
  parent    User     @relation(fields: [parentId], references: [id], name: "ParentRelations")
  studentId String
  student   Student  @relation(fields: [studentId], references: [id], name: "StudentParentRelations")
  relation  String   @default("parent")
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  createdAt DateTime @default(now())
  
  @@unique([parentId, studentId])
  @@map("parent_students")
}

// Leave Management
model LeaveApplication {
  id          String       @id @default(uuid())
  applicantId String
  applicant   User         @relation(fields: [applicantId], references: [id], name: "LeaveApplicationApplicant")
  type        LeaveType
  startDate   DateTime
  endDate     DateTime
  reason      String
  status      LeaveStatus  @default(PENDING)
  approvedById String?
  approvedBy  User?        @relation(fields: [approvedById], references: [id], name: "LeaveApplicationApprover")
  comments    String?
  tenantId    String
  tenant      Tenant       @relation(fields: [tenantId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  @@index([applicantId])
  @@index([approvedById])
  @@index([tenantId])
  @@index([status])
  @@index([startDate])
  @@index([endDate])
  @@map("leave_applications")
}

enum LeaveType {
  SICK
  VACATION
  PERSONAL
  MATERNITY
  PATERNITY
  OTHER
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}